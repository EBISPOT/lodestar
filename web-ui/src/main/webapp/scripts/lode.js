/**
 * LODESTAR - Linked Open Data Explorer and SPARQL endpoint
 * Copyright (c) 2013 EMBL - European Bioinformatics Institute
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * Author: Simon Jupp
 * Year: 2013
 * Contact: jupp [at] ebi.ac.uk
 */


/**
 * global variables
 */
var loadestarQueryService;
var loadstarExploreService;
var lodestarResultsPerPage;
var lodestarIslogging;
var lodestarDefaultQuery;
var lodestarVoidQuery;
var lodestarRdfsInference;
var lodestarDefaultResourceImg;

var loadstarNamespaces = {};
var tableid = "loadstar-results-table";

var lodestarNextUrl;
var loadstarPrevUrl;

var sparqlQueryTextArea;

// Declares a lodestar
(function($) {

    var lodestarDiv = $("<div id='lodestar-main' class='ui-widget ui-corner-all'></div>");
    var contentsDiv = $("<div id='lodestar-contents' class='ui-widget ui-corner-all'></div>");
    var errorDiv = $("<div id='error-div' class='ui-state-error' style='display: none;'/>");
    errorDiv.append($("<p class='alert'>Error: </p>").append($("<span id='error-text'></span>")));

    var appdetails = $("<div id='lodestar-description' class='ui-widget ui-corner-all'/>")
        .append($("<p></p>")
        .append($("<span id='app-details'>Generated by the <a href='http://ebispot.github.io/lodestar/'>LODEStar</a> linked data browser, developed by the SPOT Team, powered by <a title='Powered by Virtuoso' href='//virtuoso.openlinksw.com'> <img style='margin:auto;' src='images/powered_by-virtuoso.png' alt='Powered by Virtuoso' width='90' height='97' style='float: left; margin-bottom: 15px; border: 0px;'></a></span>")));
    var logginDiv = $('<div style="display: none;" id="lode-log"/>').
        append($("<pre id='logmessage'></pre>"));

    lodestarDiv.append(errorDiv);
    lodestarDiv.append(contentsDiv);
    lodestarDiv.append(appdetails);
    lodestarDiv.append(logginDiv);

    $.fn.explore = function(options) {
        var $this = $(this);
        $this.append(lodestarDiv);
        _parseOptions(options);
        _buildExplorerPage (contentsDiv);
    };

    $.fn.sparql = function(options) {
        var $this = $(this);
        $this.append(lodestarDiv);
        _parseOptions(options);
        _buildSparqlPage (contentsDiv);
        initSparql();
    };

    $.fn.voiddesc = function(options) {
        var $this = $(this);
        _parseOptions(options);
        _buildVoid ($this);
    }

})(jQuery);

function _parseOptions(options) {

    var _options = $.extend({
        'servlet_base': 'servlet',
        'query_servlet_name': 'query',
        'explore_servlet_name': 'explore',
        'results_per_page' : 25,
        'inference' : false,
        'logging' : false,
        'default_query' : "SELECT DISTINCT ?class \nwhere {[] a ?class}",
        'void_query' : "SELECT DISTINCT ?s ?p ?o \nwhere {?s a <http://rdfs.org/ns/void#Dataset>\n OPTIONAL {?s ?p ?o} }",
        'namespaces' : {
            rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
            rdfs: 'http://www.w3.org/2000/01/rdf-schema#',
            owl: 'http://www.w3.org/2002/07/owl#'},
        'example_queries' : [],
        'default_resource_image_url': 'images/rdf_flyer.gif'
    }, options);

    loadestarQueryService = _options.servlet_base + "/" + _options.query_servlet_name;
    loadstarExploreService = _options.servlet_base + "/" + _options.explore_servlet_name;
    lodestarResultsPerPage = _options.results_per_page;
    lodestarIslogging = _options.logging;
    lodestarRdfsInference = _options.inference;
    lodestarDefaultQuery = _options.default_query;
    lodestarVoidQuery = _options.void_query;
    loadstarNamespaces = _options.namespaces;
    lodestarDefaultResourceImg =  _options.default_resource_image_url;

    if (lodestarIslogging) {
        $('#lode-log').show();
        log("Parsed options...");
        log(_options)
    }

}

function namedGraphPopup(){
    //var namedGraphQuery="SELECT ?namedGraph WHERE { ?namedGraph ?b <http://purl.org/dc/terms/Dataset>. ?namedGraph <http://purl.org/pav/hasCurrentVersion> ?c }"
    var namedGraphQuery="SELECT ?title ?namedGraph ?description WHERE {" +
        "?namedGraph ?b <http://purl.org/dc/dcmitype/Dataset> ." +
        "?namedGraph <http://purl.org/pav/hasCurrentVersion> ?c ." +
        "?namedGraph <http://purl.org/dc/terms/title> ?title ." +
        "?namedGraph <http://purl.org/dc/terms/description> ?description" +
        "} #noLog"

    $("#namedGraphTab").html("Loading named Graphs...")
    $.ajax ( {
        type: 'GET',
        url: loadestarQueryService + "?query=" + encodeURIComponent(namedGraphQuery),
        headers: {
            Accept: "application/sparql-results+json"
        },
        success: function (json) {
            $("#namedGraphTab").html("<table id='namedGraphTable'></table>")
            renderSparqlResultJsonAsTable (json, 'namedGraphTable')
        }
        }
    )



}

function _buildVoid(element) {

    var voidSparql = "PREFIX dcterms: <http://purl.org/dc/terms/> " +
        "PREFIX void: <http://rdfs.org/ns/void#> " +
        "PREFIX pav: <http://purl.org/pav/2.0/> " +
        "PREFIX prov: <http://www.w3.org/ns/prov#> " +
        "SELECT ?dataset ?title ?description ?version ?triples ?created " +
        "where { " +
        "?dataset a void:Dataset ; " +
        "dcterms:title ?title; " +
        "dcterms:description ?description ;  " +
        "pav:version ?version;      " +
        "dcterms:issued ?created;   " +
        "void:triples ?triples ;   " +
        "}";

    $.ajax ( {
        type: 'GET',
        url: loadestarQueryService + "?query=" + encodeURIComponent(voidSparql),
        headers: {
            Accept: "application/sparql-results+json"
        },
        success: function (json) {
            var _json = json;
            var _variables = _json.head.vars;
            var _results = _json.results.bindings;

            var datasetURI = _results[0].dataset.value;
            var title = _results[0].title.value;
            var desc = _results[0].description.value;
            var version = _results[0].version.value;
            var triples = _results[0].triples.value;
            var created = $.datepicker.formatDate('MM dd yy', new Date(_results[0].created.value.replace(/T.*/, '')));

            var div = $("<div></div>");
            div.append($("<span style='font-weight:bold;'>Dataset description</span>"));
            div.append($("<br/>"));
//            div.append(datasetURI);
            var ea = $('<a>' + datasetURI + '</a>');
            ea.attr('href', datasetURI);
            div.append("(");
            div.append(ea);
            div.append(")");
            element.append(div);

            var table = $("<table cellpadding='0' cellspacing='0' width='100%'></table>")
            element.append(table);

            var row1 =$('<tr />');
            row1.append($('<td align="left">Title</td>'));
            row1.append($('<td align="right">' + title + '</td>'));
            table.append(row1);

            var row2 =$('<tr />');
            row2.append($('<td align="left">Description</td>'));
            row2.append($('<td align="right">' + desc + '</td>'));
            table.append(row2);

            var row3 =$('<tr />');
            row3.append($('<td align="left">Version</td>'));
            row3.append($('<td align="right">' + version + '</td>'));
            table.append(row3);

            var row4 =$('<tr />');
            row4.append($('<td align="left">Issued</td>'));
            row4.append($('<td align="right">' + created + '</td>'));
            table.append(row4);

            var row5 =$('<tr />');
            row5.append($('<td align="left">Number of triples</td>'));
            row5.append($('<td align="right">' + triples + '</td>'));
            table.append(row5);

            if (_results.length > 1) {
                var row6 =$('<tr />');
                row6.append($('<td align="left">Previous versions</td>'));

                var td6 = $("<td align='right'></td>");
                var ul6 = $("<ul></ul>");
                row6.append(td6);
                td6.append(ul6);
                for (var i = 1; i < _results.length; i++) {
                    var formattedNode = _formatNode(_results[i].previous, 'previous');
                    ul6.append($("<li></li>").append(formattedNode));
                }
                table.append(row6);
            }
        },
        error: function (request, status, error) {
            displayError(request.responseText);
        }
    })

}


function _buildExplorerPage(element) {

    var id = element.attr("id") + "_lode_explore";
    element.after('<div id="' + id + '"></div>');

    var topObjectsDiv = $('<div class=\'topObjectDiv\'></div>');
    $("#" + id).append(topObjectsDiv);

    var resourceDepiction =  id + '_resourceDepiction';
    $(topObjectsDiv).append('<div id="' + resourceDepiction + '" style="float:right;"/>');
    renderDepiction($("#" + resourceDepiction));

    var topObjects =  id + '_resourceTopObject';
    $(topObjectsDiv).append('<div style=\'max-width:700px;\' id="' + topObjects + '"/>');
    renderShortDescription($("#" + topObjects));

    var resourceType =  id + '_resourceType';
    $(topObjectsDiv).append('<div id="' + resourceType + '"/>');
    renderResourceTypes($("#" + resourceType));

    var relatedToObjects =  id + '_relatedToObjects';
    $("#" + id).append('<div id="' + relatedToObjects + '"/>');
    renderRelatedToObjects($("#" + relatedToObjects));

    var relatedFromSubjects =  id + '_relatedFromSubjects';
    $("#" + id).append('<div id="' + relatedFromSubjects + '"/>');
    renderRelatedFromSubjects($("#" + relatedFromSubjects));

    $("#" + id).append('<hr/>')
    var downloadsSpan  = $("<span style='padding-left: 5px;'/>");
    var xmlimg = $('<img />');
    xmlimg.attr('src', 'images/file_RDF_XML_small.gif');
    xmlimg.attr('alt', 'RDF/XML');
    xmlimg.attr('title', 'Show RDF/XML for this resource');
    xmlimg.attr('style','cursor:pointer')
    xmlimg.click(function () {
        renderXML();
    });

    var n3img = $('<img />');
    n3img.attr('src', 'images/file_RDF_N3_small.gif');
    n3img.attr('alt', 'RDF/N3');
    n3img.attr('title', 'Show RDF/N3 for this resource');
    n3img.attr('style','cursor:pointer')
    n3img.click(function () {
        renderN3();
    });

    var jsonimg = $('<img />');
    jsonimg.attr('src', 'images/file_RDF_JSONLD_small.jpg');
    jsonimg.attr('alt', 'RDF/JSON');
    jsonimg.attr('title', 'Show RDF/JSON for this resource');
    jsonimg.attr('style','cursor:pointer')
    jsonimg.click(function () {
        renderJson();
    });

    downloadsSpan.append(xmlimg);
    downloadsSpan.append("&nbsp;&nbsp;");
    downloadsSpan.append(n3img);
    downloadsSpan.append("&nbsp;&nbsp;");
    downloadsSpan.append(jsonimg);
    $("#" + id).append(downloadsSpan);
}

function _buildSparqlPage(element) {

    var sparqlForm = $("<form id='lodestar-sparql-form' class='ui-widget ui-corner-all' name='lode-star-sparql form' action='#loadstar-results-section' method='GET'></form>");
    var fieldSet= $("<fieldset></fieldset>");
    fieldSet.append($("<legend>Enter SPARQL Query</legend>"));
    sparqlForm.append(fieldSet);
    var section1 = $("<section id='sparqlTextfield' class='lodestar-grid12 grid_12 alpha'></section>");
    var section2 = $("<section id='example_queries' class='lodestar-grid12 grid_12 alpha'></section>");

//    fieldSet.append($("<legend>Enter SPARQL Query</legend>"));
    fieldSet.append(section1);
    fieldSet.append(section2);

    var myTextArea = $("<textarea  name='query' id='textarea' rows='25' style='width:100%'></textarea>");

    section1.append(
        $("<p></p>").append(
            myTextArea));

    var controlDiv=$("<div id='controlDiv'></div>")
    controlDiv.append(
        $("<p style='float: right;'></p>").append(
            $("<label for='render'>Output: </label>"))
            .append(
            $("<select name='render' id='render'></select>")
                .append('<option value="HTML">HTML</option>')
                .append('<option value="XML">XML</option>')
                .append('<option value="JSON">JSON</option>')
                .append('<option value="CSV">CSV</option>')
                .append('<option value="TSV">TSV</option>')
                .append('<option value="RDF/XML">RDF/XML</option>')
                .append('<option value="N3">RDF/N3</option>')
                .append('<option value="JSON-LD">JSON-LD</option>')
        )
    );

    if (lodestarRdfsInference) {
        controlDiv.append(
            $("<p></p>").append(
                $("<label for='inference'>RDFS inference? </label>"))
                .append(
                $("<input type='checkbox' id='inference' name='inference' value='true'/>")
            )
        );
    }

    controlDiv.append(
        $("<p></p>").append(
            $("<label for='limit'>Results per page: </label>"))
            .append(
            $("<select name='limit' id='limit'></select>")
                .append("<option value='25' selected='selected'>25</option>")
                .append("<option value'50'>50</option>")
                .append("<option value'100'>100</option>")
            )
    );


    /*
    section1.append(
    $("<label for='limit'>Named Graph</label><input type='text' id='namedGraph'/>")
    $("<label for='namedGraph'>Named Graph</label><textarea  name='namedGraph' id='namedGraph' rows='1' style='width:100%'></textarea>")
    );*/

    controlDiv.append (
        $("<input id='offset' name='offset' type='hidden' value='0' />")

    );


    controlDiv.append(
        $("<p></p>").append("<input type='button' class='submit ui-button ui-widget ui-corner-all' style='display: inline;'  onclick='submitQuery()' value='Submit Query' />&nbsp;")
                    .append("<input type='button' class='submit  ui-button ui-widget ui-corner-all' style='display: inline;' onclick='reloadPage()' value='Reset' />")
    );

    section1.append(controlDiv)

    //section1.append
    controlDiv.append("<div id='query-executing-spinner'>" +
        "Executing query...&nbsp;<img src='images/loadingAnimation.gif'>" +
        "</div>");

    //Building the Example Query section
    section2.append(
        $("<p></p>").append("<h5>Example Queries</h5>")
    )

    section2.append(
        ("<ul id='queries_list'></ul>")
    )

    element.append(sparqlForm);

    var resultsSection = $("<section id='loadstar-results-section' styname='results'></section>");

    if (activateQueryHistory) {
        var tabs = $('<ul class="tabs"  data-tabs id="example-tabs">' +
            '<li class="tabs-title" id="linkResult"><a>Results</a></li> ' +
            '<li class="tabs-title" id="linkHistory"><a>Query history</a></li>' +
            '<li class="tabs-title" id="linkNamedGraph"><a>Named Graphs</a></li></ul>'+
            '<div class="tabs-content" data-tabs-content="example-tabs">' +
            '<div id="resultTab" class="tabs-panel">' +
            '<div id="pagination" class="pagination-banner"></div> ' +
            '<div style="padding: 5px; width:99%;overflow: auto;"><table id="loadstar-results-table"></table></div>' +
            '</div>' +
            '<div id="historyTab" class="tabs-panel historyTab"></div>' +
            '<div id="namedGraphTab" class="tabs-panel"></div>' +
            '</div>')
    }else
    {
        var tabs = $('<ul class="tabs"  data-tabs id="example-tabs">' +
            '<li class="tabs-title" id="linkResult"><a>Results</a></li> ' +
            '</ul>' +
            '<div class="tabs-content" data-tabs-content="example-tabs">' +
            '<div id="resultTab" class="tabs-panel">' +
            '<div id="pagination" class="pagination-banner"></div> ' +
            '<div style="padding: 5px; width:99%;overflow: auto;"><table id="loadstar-results-table"></table></div>' +
            '</div>' +
            '</div>')
    }


    resultsSection.append(tabs)


    element.append(resultsSection);

}

function initSparql() {
    $(document).ready(function() {
        sparqlQueryTextArea = CodeMirror.fromTextArea($('#textarea')[0]);
        resetPage();
        setNamespaces(lodeNamespacePrefixes);
        setExampleQueries ();
        querySparql();

        //Update Tab with an empty query leads to
        updateHistoryTab("",0,0)

        $("#resultTab").show();      //Show resultsTab by default
        $('#historyTab').hide();    //Hide historyTab by default at startup
        $('#namedGraphTab').hide();

        if (activateQueryHistory){
        //Register click events for Result and History Button
        $("#linkResult").on('click', function(){
            $("#resultTab").show()
            $("#historyTab").hide()
            $("#namedGraphTab").hide()
        })

        $("#linkHistory").click(function(){
            $("#resultTab").hide()
            $("#namedGraphTab").hide()
            $("#historyTab").show()
        })

        $("#linkNamedGraph").click(function() {
            $("#resultTab").hide()
            $("#historyTab").hide()
            $("#namedGraphTab").show()
            namedGraphPopup();
        })
    }

    });
}

function submitQuery() {
    // reset any offset
    $('#offset').val(0);
    $('#lodestar-sparql-form').submit();
}

function setDefaultQuery() {
    sparqlQueryTextArea.setValue( _getPrefixes() + "\n" + lodestarDefaultQuery );
}

function querySparql () {

    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    var querytext = null;
    var limit = lodestarResultsPerPage;
    var offset = 0;
    var rdfs = "false";

    // if no query just return and wait for one
    if (!queryString) {
        setDefaultQuery();
        return;
    }

    // get the query string and execute
    if (queryString.match(/query=/)) {
        querytext = this._betterUnescape(queryString.match(/query=([^&]*)/)[1]);
        var query = _getPrefixes() + querytext;
    }

    if (queryString.match(/limit=/)) {
        limit = this._betterUnescape(queryString.match(/limit=([0-9]*)/)[1]);
        lodestarResultsPerPage = limit;
        $('#limit').val(limit);
    }

    if (queryString.match(/offset=/)) {
        offset = this._betterUnescape(queryString.match(/offset=([0-9]*)/)[1]);
        $('#offset').val(offset);
    }

    if (lodestarRdfsInference) {
        if (queryString.match(/inference=/)) {
            var iv = this._betterUnescape(queryString.match(/inference=([^&]*)/)[1]);

            if (iv == 'true') {
                rdfs = "true";
                $('#inference').attr("checked", true);
            }
        }
    }
    clearErrors();
    if (!querytext) {
        querytext = query;
    }

    // GET THE RENDERING
    var rendering = "HTML";
    if (queryString.match(/render=/)) {
        rendering = this._betterUnescape(queryString.match(/render=([^&]*)/)[1]);
    }

    sparqlQueryTextArea.setValue(querytext);

    var exp = /^\s*(?:PREFIX\s+[^:]*:\s?<[^>]*>\s*)*(\w+)\s*.*/i;
    var match = exp.exec(querytext);
    var successFunc;
    var requestHeader;


    if (match) {
        if (match[1].toUpperCase() == 'CONSTRUCT' || match[1].toUpperCase() == 'DESCRIBE') {

            if (rendering.match(/HTML/)) {
                requestHeader = "text/plain";
                successFunc = function(model) {
                    hideBusyMessage();
                    renderGraphQuery(model, tableid);
                };
            }
            else if (rendering.match(/RDF/)) {
                location.href = loadestarQueryService + "?query=" + encodeURIComponent(querytext) + "&format=RDF/XML";
            }
            else if (rendering.match(/JSON-LD/)) {
                location.href = loadestarQueryService + "?query=" + encodeURIComponent(querytext) + "&format=JSON-LD";
            }
            else if (rendering.match(/N3/)) {
                location.href = loadestarQueryService + "?query=" + encodeURIComponent(querytext) + "&format=N3";
            }
            else  {
                displayError("You can only render graph queries in either HTML, RDF/XML, RDF/JSON or RDF/N3 format")
                return;
            }
        }
        else if (match[1].toUpperCase() == 'DELETE' || match[1].toUpperCase() == 'UPDATE') {
            displayError("UPDATE or DELETE queries not allowed")
            return;
        }
        else {
            if (rendering.match(/HTML/)) {
                requestHeader = "application/sparql-results+json";
                successFunc = function(json) {
                    hideBusyMessage();
                    if (activateQueryHistory){  updateHistoryTab(query, json.results.bindings.length, json.head.vars);    }
                    renderSparqlResultJsonAsTable(json, tableid);
                };
            }
            else if (rendering.match(/^XML/)) {
                location.href = loadestarQueryService + "?query=" + encodeURIComponent(querytext) + "&format=XML&limit=" + limit + "&offset=" + offset + "&inference=" + rdfs;
            }
            else if (rendering.match(/JSON$/)) {
                location.href = loadestarQueryService + "?query=" + encodeURIComponent(querytext) + "&format=JSON&limit=" + limit + "&offset=" + offset+ "&inference=" + rdfs;
            }
            else if (rendering.match(/CSV/)) {
                location.href = loadestarQueryService + "?query=" + encodeURIComponent(querytext) +"&format=CSV&limit=" + limit + "&offset=" + offset+ "&inference=" + rdfs;
            }
            else if (rendering.match(/TSV/)) {
                location.href = loadestarQueryService + "?query=" + encodeURIComponent(querytext) +"&format=TSV&limit=" + limit + "&offset=" + offset+ "&inference=" + rdfs;
            }
            else  {
                displayError("You can only render SELECT queries in either HTML, XML, CSV, TSV or JSON format")
                return;
            }
        }
    }

    // about to execute query
    displayBusyMessage();
    setNextPrevUrl(querytext, limit, offset, rdfs);
    $.ajax ( {
        type: 'GET',
        url: loadestarQueryService + "?"+ queryString,
        headers: {
            Accept: requestHeader
        },
        success: successFunc,
        error: function (request, status, error) {
            hideBusyMessage();
            displayError(request.responseText);
        }
    })
}

function updateHistoryTab(query, numerOfRows, headings){
    var queryHistory = $.jStorage.get("history");

    //If the query is not empty, add it to the queryHistory store - in the other case, we have to create the very first entry of the array
    if (query!="") {
        if (queryHistory == null) {
            queryHistory = [{"query": query, "date": Date(), "description": "You can put a description here", "rows": numerOfRows, "headings":headings}]
            }
        else {
                //queryHistory.push({"query": query, "date": Date(), "description": "You can put a description here", "rows": numerOfRows, "headings":headings})
                queryHistory.unshift({"query": query, "date": Date(), "description": "You can put a description here", "rows": numerOfRows, "headings":headings})

                if (queryHistory.length>100){
                    queryHistory.pop()
                }
        }
           $.jStorage.set("history", queryHistory);
    }

    $('#historyTab').empty();

    var deleteHistoryButton=$('<a id="deleteCompleteHistory" title="Deletes every entry in this history tab!" href="#">Delete history</a>')

     //Onclick event for the History button - Delete the complete history
    deleteHistoryButton.click(function() {
        $.jStorage.deleteKey("history")
        $('#entryPinwall').text('');
        $('#deleteCompleteHistory').remove()
        $('#historyTab').append("The query history is empty at the moment!")
    })

    var entryPinwall=$('<div id="entryPinwall"></div>')

    if (queryHistory!=null) {
        queryHistory.forEach(function (value, i) {
            var entry = $('<div class="historyEntry"></div>')
            entry.html("<b>Description:</b><input id='input" + i + "' class='descriptionInputBox' type='text' value='" + value.description + "'/>")

            var link = $("<a id=saveDescriptionLink" + i + " class='saveDescritionLink'>Save description</a>")
            var infobox = $("<br><b>Result had " + value.rows + " rows</b> with the following headings: <b>" + value.headings + "</b>")
            var queryText = $('<textarea id="historyQueryText"></textarea>')

            tmpArray = value.query.split("\n");

            //Getting 'rid' of Prefixes just for displaying purposes! (only in tmpResult BUT not in the real data)
            tmpResult = []
            tmpArray.forEach(function (value) {
                if (value.startsWith("PREFIX") === false) {
                    var tmp = value
                    if (tmp.length <= 1)               //Trim short strings so we can get rid of strings with length 0 later on
                    {
                        tmp = tmp.trim();
                    }
                    if (tmp.length != 0) {
                        tmpResult.push(tmp);
                    }

                }
            })

            link.click(function () {
                queryHistory[i].description = $("#input" + i).val()
                $.jStorage.set("history", queryHistory);
                updateHistoryTab("", 0, "")
            })

            var runButton = $('<button type="button" class="button tiny historyButton" value="' + i + '">Use this query</button>');
            runButton.click(function () {
                sparqlQueryTextArea.setValue(value.query);
                location.href = "#main-content-area"
            })

            var deleteThisButton = $('<button type="button" class="button tiny historyButton" value="' + i + '">Remove this query</button>')
            deleteThisButton.click(function () {
                queryHistory.splice(this.value, 1);
                $.jStorage.set("history", queryHistory);
                updateHistoryTab("", 0, "")
            })


            /*var shareThisButton = $('<button type="button" class="button tiny shareButton">Share this query</button>')
            shareThisButton.click(function () {
                console.log("Not implemented yet!")
            })*/

            var savedOnDatePhrase = "<div class='savedOnPhrase'><i>This query was saved on </i><b>" + value.date.toString() + "</b></div>"

            entry.append(link)
            entry.append(infobox)
            entry.append(queryText)
            entry.append(runButton)
            entry.append(deleteThisButton)
            entry.append(savedOnDatePhrase)
            //entry.append(shareThisButton)
            entryPinwall.append(entry)

            var codeQueryText = CodeMirror.fromTextArea(queryText[0], {autoRefresh: true, readOnly: true})
            codeQueryText.setValue(tmpResult.join("\n"))

            codeQueryText.getWrapperElement().style.height = "auto";
            codeQueryText.getWrapperElement().style.margin = "10px 10px 10px 10px";
        })

    $('#historyTab').append(entryPinwall)
    $('#historyTab').append(deleteHistoryButton)
    }
    //IF Query History is empty, print a msg telling the user so
    else{
        $('#historyTab').append("The query history is empty at the moment!")
    }

}

/*
if we want that effect, we have to add onfocus='highlight("+i+")' to entry.html
function highlight(i){
    console.log(i)
    $("#saveDescriptionLink"+i).addClass("saveDescritionLinkHighlighted").delay(200).queue(function() {
        $("#saveDescriptionLink"+i).removeClass("saveDescritionLinkHighlighted");
    });
}*/


function setNextPrevUrl (queryString, limit, offset, rdfs) {

    lodestarNextUrl = "query=" + encodeURIComponent(queryString) + "&limit=" + limit + "&inference=" + rdfs + "&offset=" + (parseInt(offset) + parseInt(lodestarResultsPerPage));
    if (offset >= lodestarResultsPerPage) {
        loadstarPrevUrl = "query=" + encodeURIComponent(queryString) + "&limit=" + limit + "&inference=" + rdfs + "&offset=" + (parseInt(offset) - parseInt(lodestarResultsPerPage));
    }
    else {
        loadstarPrevUrl = "query=" + encodeURIComponent(queryString) + "&limit=" + limit + "&inference=" + rdfs + "&offset=0";
    }
}


function renderGraphQuery (graph, tableid) {

    var rows = graph.split (/\n/);
    $("#" + tableid).html("");

    var header = createTableHeader(['Subject', 'Predicate', 'Object']);
    $("#" + tableid).append(header);

    // parse an n-triples file, markup links
    for (var x = 0 ; x < rows.length; x++ ) {
        // check for commented lines #

        // remove line endings
        var row = rows[x].replace (/\s+.$/, '');

        row = row.replace (/\^\^\<.*\>$/, '');
        var cells = row.split(/["<>]+\s+[<>"]+/);

        // remove data types

        // ignore blank nodes
        if (cells.length == 3) {
            var tr =$('<tr />');
            for (var j = 0; j < cells.length; j ++) {
                var cell = cells[j].replace (/^["<]/, '');
                cell = cell.replace (/[">]$/, '');
                var td = $('<td />');
                var resource = cell;
                resource = resource.replace (/^["<]/, '');
                resource = resource.replace (/^[">]\s+\.$/, '');
                if (resource.match(/^(https?|ftp|mailto|irc|gopher|news):/)) {
                    var shortForm =  _toQName(resource);
                    if (shortForm == null) {
                        shortForm = resource;
                    }

                    var internalHref = "./describe?uri=" +encodeURIComponent(resource);

                    var linkSpan  = $('<span/>');
                    var img = $('<img />');
                    img.attr('src', 'images/external_link.png');
                    img.attr('alt', '^');
                    img.attr('title', 'Resolve URI on the web');

                    var ea = $('<a />');
                    ea.attr('href', resource);
                    ea.attr('class', 'externallink');
                    ea.attr('target', 'blank');
                    ea.append(img);


                    var a = $('<a />');
                    a.attr('href',internalHref);
                    a.text(shortForm);
                    linkSpan.append(a);
                    td.append(linkSpan);
                }
                else {
                    td.append (resource)
                }
                tr.append(td);
            }
        }
        $("#" + tableid).append(tr);
    }
}

function displayPagination(numberOfRowsOfSparqlResult)  {
    //Clear pagination first before it is build again
    $('#pagination').html("")

    var prevA = $('<a></a>');
    prevA.attr('href',"?" + loadstarPrevUrl);
    prevA.attr('class',"pag prev");
    prevA.text("Previous")

    var nextA = $('<a></a>');
    nextA.attr('href',"?" + lodestarNextUrl);
    nextA.attr('class',"pag next");
    nextA.text("Next")

    var pagtext = $('<span></span>');
    pagtext.attr('class', "pag pagmes");
    pagtext.text('');
    pagtext.text('Show ' + $('#limit').val() + ' results per page (offset ' + $('#offset').val() + ")")

    //Only show previous button if offset is bigger than 0!
    if ($('#offset').val()>0)
    {   $('#pagination').append(prevA); }

    $('#pagination').append(pagtext);

    //Only show next button if the number of results equals the 'limit' per page - e.g. if there are only 2 results, we don't need a next button
    if (numberOfRowsOfSparqlResult == $('#limit').val())
        {   $('#pagination').append(nextA);        }

    $('#pagination').show();

}

function renderSparqlResultJsonAsTable (json, tableid) {
    log("sparql query rendering json")

    // clear existing content
    $("#" + tableid).html("");
    var _json = json;

    if (_json == undefined) {
        displayError("There was a problem getting results for this query");
    }
    else {
        try {

                if (_json.results) {
                    if (_json.results.bindings) {
                        var _results = _json.results.bindings;

                        if (_results.length ==0) {
                            $("#resultTab").html("No results for this query!")
                        }
                        else {
                            var _variables = _json.head.vars;

                            var header = createTableHeader(_variables);

                            $("#" + tableid).append(header);

                            if(tableid!=='namedGraphTable')
                                {displayPagination(_results.length);}

                            for (var i = 0; i < _results.length; i++) {
                                var row =$('<tr />');
                                var binding = _results[i];
                                for (var j = 0 ; j < _variables.length; j++) {
                                    var varName = _variables[j];
                                    var formattedNode = _formatNode(binding[varName], varName);
                                    var cell = $('<td />');
                                    cell.append (formattedNode);
                                    row.append(cell);
                                }
                                $("#" + tableid).append(row);
                            }
                        }
                    }
                    else {
                        displayError("No result bindings");
                    }
                }
                else if (_json.boolean != undefined)  {
                    var header = createTableHeader(["boolean"]);
                    $("#" + tableid).append(header);
                    var row =$('<tr />');
                    var cell = $('<td />');
                    if (_json.boolean) {
                        cell.append ("True");
                    }
                    else {
                        cell.append ("False");
                    }
                    row.append(cell);
                    $("#" + tableid).append(row);
                }
                else {
                    alert("No results!")
                }

            }
            catch (err) {
                displayError("Problem rendering results: "+ err.message);
            }

    }


}

function _formatNode (node, varName) {
    if (!node) {
        return _formatUnbound(node, varName);
    }
    if (node.type == 'uri') {
        return _formatURI(node, varName);
    }
    if (node.type == 'bnode') {
        return _formatBlankNode(node, varName);
    }
    if (node.type == 'literal') {
        return _formatPlainLiteral(node, varName);
    }
    if (node.type == 'typed-literal') {
        return _formatTypedLiteral(node, varName);
    }
    return '???';
}

function _formatURI (node, varName) {

    var internalHref = "./describe?uri=" +encodeURIComponent(node.value);

    var title = node.value;
    var className = 'graph-link';
    var shortForm =  _toQName(node.value);
    if (!shortForm) {
        shortForm = "<" + node.value + ">";
    }

    // handle external link
    var xref = node.value;
//
    match = node.value.match(/^(https?|ftp|mailto|irc|gopher|news):/);
    if (match) {
        var linkSpan  = $('<span/>');
        var img = $('<img />');
        img.attr('src', 'images/external_link.png');
        img.attr('alt', '^');
        img.attr('title', 'Resolve URI on the web');

        var ea = $('<a />');
        ea.attr('href', node.value);
        ea.attr('class', 'externallink');
        ea.attr('target', 'blank');
        ea.append(img);

        var a = $('<a />');
        a.attr('href',internalHref);
        a.attr('class',className);
        a.text(shortForm);

        linkSpan.append(a);
        return linkSpan;

    }

    return xref;

}

function _hrefBuilder(uri, label, internal) {

    var internalHref = "./describe?uri=" +encodeURIComponent(uri);
    var className = 'graph-link';

    var linkSpan  = $('<span/>');

    var a = $('<a />');
    if (internal) {
        a.attr('href',internalHref);
        a.attr('title',uri);

    }
    else {
        a.attr('href',uri);
        a.attr('title',uri);
        a.attr('target', 'blank');

    }
    a.attr('class',className);
    a.text(label);

    linkSpan.append(a);

    if (!internal) {
        linkSpan.append('&nbsp;');
        var img = $('<img />');
        img.attr('src', 'images/external_link.png');
        img.attr('alt', '^');
        img.attr('title', 'Resolve URI on the web');

        var ea = $('<a />');
        ea.attr('href', uri);
        ea.attr('title',uri);
        ea.attr('class', 'externallink');
        ea.attr('target', 'blank');
        ea.append(img);
        linkSpan.append(ea);
    }
    return linkSpan;

}


function setExampleQueries() {
    if (exampleQueries != null) {

        if (exampleQueries.length > 0) {

            for (var j=0;j<exampleQueries.length; j++) {
                var category = exampleQueries[j].category;

                $('#queries_list').append("<a class='exampleCategorieslinks' id=cat_"+category+">"+category+"</a><br>");
                $('#queries_list').append("<div id=queries_cat_"+category+" class='list_exampleQueries'></div>")

                $("#cat_"+category).click(function(){

                    //console.log(this.id)
                    //console.log($("#queries_"+this.id).is(":visible"))

                    if ($("#queries_"+this.id).is(":visible"))
                    {
                        $(".list_exampleQueries").hide();
                    }
                    else
                    {
                        $(".list_exampleQueries").hide();
                        $("#queries_"+this.id).toggle();
                    }
                })

                for (var x = 0; x < exampleQueries[j]['queries'].length; x++) {

                    // queries_list
                    var shortname = exampleQueries[j]['queries'][x].shortname;
                    var desc = exampleQueries[j]['queries'][x].description;
                    var query = exampleQueries[j]['queries'][x].query;

                    log("query:" + shortname + " " + desc + " " + query);
                    var a = $('<a></a>');
                    a.attr ('data-category',j);
                    a.attr ('id', x);
                    a.attr ('class', 'query-short');
                    a.text (shortname);

                    $(a).click(function () {
                        _setTextAreQuery(this)
                    });

                    var li = $('<li></li>');
                    li.append(a);
                    li.append($('<p></p>').append(desc));

                    $("#queries_cat_"+category).append(li)

                }
                    $('#queries_list').append($("#queries_cat_"+category).hide())
            }

        }

    }

}

function _setTextAreQuery(anchor) {
    sparqlQueryTextArea.setValue(_getPrefixes() + "\n" + exampleQueries[$(anchor).attr('data-category')]['queries'][anchor.id].query);
    }

function _formatPlainLiteral (node, varName) {
    var text = '"' + node.value + '"';
    if (node['xml:lang']) {
        text += '@' + node['xml:lang'];
    }
    return document.createTextNode(node.value);
}

function _formatTypedLiteral (node, varName) {
    var text = '"' + node.value + '"';
    if (node.datatype) {
        text += '^^' + this._toQNameOrURI(node.datatype);
    }
    if (this._isNumericXSDType(node.datatype)) {
        var span = document.createElement('span');
        span.title = text;
        span.appendChild(document.createTextNode(node.value));
        return span;
    }
    return document.createTextNode(node.value);
}

function _formatBlankNode (node, varName) {
    return document.createTextNode('_:' + node.value);
}

function _formatUnbound (node, varName) {
    var span = document.createElement('span');
    span.className = 'unbound';
    span.title = 'Unbound'
    span.appendChild(document.createTextNode('-'));
    return span;
}

function _toQName (uri) {
    for (prefix in loadstarNamespaces) {
        var nsURI = loadstarNamespaces[prefix];
        if (uri.indexOf(nsURI) == 0) {
            return prefix + ':' + uri.substring(nsURI.length);
        }
    }
    return null;
}

function _toQNameOrURI (uri) {
    var qName = this._toQName(uri);
    return (qName == null) ? '<' + uri + '>' : qName;
}

function _isNumericXSDType (datatypeURI) {
    for (i = 0; i < this._numericXSDTypes.length; i++) {
        if (datatypeURI == this._xsdNamespace + this._numericXSDTypes[i]) {
            return true;
        }
    }
    return false;
}

var _xsdNamespace = 'http://www.w3.org/2001/XMLSchema#';
var _numericXSDTypes = ['long', 'decimal', 'float', 'double', 'int',
    'short', 'byte', 'integer', 'nonPositiveInteger', 'negativeInteger',
    'nonNegativeInteger', 'positiveInteger', 'unsignedLong',
    'unsignedInt', 'unsignedShort', 'unsignedByte'];


function createTableHeader (names) {
    var htmlString = "";
    for (var i = 0 ; i < names.length; i++) {
        log(names[i]);
        htmlString +="<th>" + names[i] + "</th>";
    }
    return htmlString;
}


function renderResourceTypes(element) {

    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    var uri;
    if (queryString.match(/uri=/)) {
        uri = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);
        var query = _getPrefixes() + uri;

        var loadingimg = $('<img />');
        loadingimg.attr('src', 'images/ajax-loader.gif');
        loadingimg.attr('alt', '.');
        var loading = $('<p>Fetching resource type data...</p>').append(loadingimg);
        element.append(loading);

        $.ajax ( {
            type: 'GET',
            url: loadstarExploreService + "/resourceTypes?" + queryString,
            success: function (data){
                loading.empty();
                if (data.length > 0) {
                    var div = element;
                    if (data[0].relatedObjects.length > 0) {

                        var uriset = {};
                        var p = $("<p></p>");

                        //Looping over other types for this entity if the exist!
                        for (var z = 0; z <data[0].relatedObjects.length; z++) {

                            var about = $("<h3 class='side'>Type: </h3>");
                            var span = $("<span style='font-size:larger'></span>");



                            var description = data[0].relatedObjects[z].description;
                            var uri = data[0].relatedObjects[z].uri;
                            uriset[uri] = true;
                            var label = data[0].relatedObjects[z].label;

                            p.append($("<br/>"));
                            p.append(about);
                            p.append(span);
                            p.append (_hrefBuilder(uri,label, true));
                            p.append($("<br/>"));

                            if (description){
                                p.append(description)
                            }
                            else{
                                p.append("No description available")
                            }

                        }

                        p.append($("<br/><br/>"));
                        p.append($("<span class='moreTypes'><a>Get types of parent objects</a></span>").click(function() {
                            if ($('span.moreTypes').length>0){
                                $('span.moreTypes').remove();
                                renderAllResourceTypes(p, uriset);
                            }
                        }));
                        div.append(p);
                    }
                }

            },
            error: function (request, status, error) {
                loading.empty();
                hideBusyMessage();
                displayError(request.responseText);
            }
        })
    }
}

function renderAllResourceTypes(element, exclude) {
    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    if (queryString.match(/uri=/)) {

        var loadingimg = $('<img />');
        loadingimg.attr('src', 'images/ajax-loader.gif');
        loadingimg.attr('alt', '.');
        var loading = $('<p>Fetching more resource type data...</p>').append(loadingimg);
        element.append(loading);

        $.ajax ( {
            type: 'GET',
            url: loadstarExploreService + "/resourceAllTypes?" + queryString,
            success: function (data){

                var div = element;
                var p = $("<p></p>");

                if (data.length == 0) {
                    p.append("No more type information available for this resource");
                }
                else {
                    for (var x = 0; x < data.length; x ++) {
                        for (var z = 0; z <data[x].relatedObjects.length; z++) {
                            var description = data[x].relatedObjects[z].description;
                            var uri = data[x].relatedObjects[z].uri;
                            var label = data[x].relatedObjects[z].label;

                            if (!exclude[uri]) {
                                p.append(_hrefBuilder(uri, label, true));
                                if (description) {
                                    p.append(" : ");
                                    p.append(description)
                                }
                                p.append($("<br/>"));
                            }
                        }
                    }
                }
                div.append(p);
                loading.empty();
            },
            error: function (request, status, error) {
                loading.empty();
                hideBusyMessage();
                displayError(request.responseText);
            }
        })
    }
}

function renderDepiction (element) {
    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';
    if (queryString.match(/uri=/)) {
        $.ajax ( {
            type: 'GET',
            url: loadstarExploreService + "/resourceDepictions?" + queryString,
            success: function (data){

                var imgurl = lodestarDefaultResourceImg;
                if (data.length > 0) {
                    imgurl = data[0].url;
                }
                var img = $('<img />');
                img.attr('src', imgurl);
                img.attr('alt', '^');
                img.attr('title', 'Resource depiction');
                element.append(img) ;
            },
            error: function (request, status, error) {
                hideBusyMessage();
                displayError(request.responseText);
            }
        });
    }
}
function renderShortDescription (element) {
    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    var uri;
    if (queryString.match(/uri=/)) {
        uri = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);

        var loadingimg = $('<img />');
        loadingimg.attr('src', 'images/ajax-loader.gif');
        loadingimg.attr('alt', '.');
        var loading = $('<p>Fetching data...</p>').append(loadingimg);
        element.append(loading);

        $.ajax ( {
            type: 'GET',
            url: loadstarExploreService + "/resourceShortDescription?" + queryString,
            success: function (data){
                loading.empty();
                var div = element;

                var about = $("<h3 class='side'>" + "About:" + "</h3>");
                var span2 = $("<span style='font-size:larger'></span>");
                span2.append(_hrefBuilder(data.uri, data.displayLabel, false));
                div.append(about);
                div.append(span2);
                var p = $('<p></p>');

                p.append($("<span style='color:gray;'></span>").append(data.uri));
                p.append("<br/>");

                if (data.description) {
                    p.append(data.description);
                    p.append("<br/>");

                }
                if (data.datasetUri) {
                    var propertyP = $("<a style='font-weight: bold;' title='http://rdfs.org/ns/void#inDataset' href='describe?uri=" + encodeURIComponent("http://rdfs.org/ns/void#inDataset") + "'>Dataset</a>");
                    p.append(propertyP);
                    p.append(" : ");

                    p.append(_hrefBuilder(data.datasetUri, data.datasetUri, true));
                    p.append($("<br/>"));
                }
                div.append(p);
                renderTopRelatedObjects(p);

            },
            error: function (request, status, error) {
                loading.empty();
                hideBusyMessage();
                displayError(request.responseText);
            }
        });
    }
}

function renderTopRelatedObjects(p) {
    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    var uri;
    if (queryString.match(/uri=/)) {
        uri = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);
        var query = _getPrefixes() + uri;

        $.ajax ( {
            type: 'GET',
            url: loadstarExploreService + "/resourceTopObjects?" + queryString,
            success: function (data){

                for (var x = 0; x < data.length; x ++) {

                    var propertyLabel = data[x].propertyLabel;

                    for (var z = 0; z <data[x].relatedObjects.length; z++) {

                        var uri = data[x].relatedObjects[z].uri;
                        var label = data[x].relatedObjects[z].label;

                        p.append($("<span style='text-transform: capitalize;color: #0f2559; font-weight: bold'></span>").append(propertyLabel));
                        p.append(" : ");
                        if (uri == undefined){
                            p.append("\"" + label + "\"");
                        }
                        else {
                            p.append(_hrefBuilder(uri, label, true));
                        }
                        p.append($("<br/>"));

                    }
                }
            },
            error: function (request, status, error) {
                hideBusyMessage();
                displayError(request.responseText);
            }
        });
    }
}

function renderRelatedToObjects(element) {

    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    var uri;
    if (queryString.match(/uri=/)) {
        uri = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);

        var loadingimg = $('<img />');
        loadingimg.attr('src', 'images/ajax-loader.gif');
        loadingimg.attr('alt', '.');
        var loading = $('<p>Fetching related to data...</p>').append(loadingimg);
        element.append(loading);

        $.ajax ( {
            type: 'GET',
            url: loadstarExploreService + "/relatedToObjects?" + queryString,
            success: function (data){

                loading.empty();
                if (data.length > 0) {
                    var div = $('<p></p>');

                    var about = $("<h3>" + "Related to" + "</h3>");

                    element.append(about);

                    for (var x = 0; x < data.length; x ++) {

                        var propertyLabel = data[x].propertyLabel;
                        var propertyUri = data[x].propertyUri;

                        var propertyP = $("<a style='font-weight: bold;' href='describe?uri=" + encodeURIComponent(propertyUri) + "'>"+  propertyLabel +"</a>");

                        div.append(propertyP);

                        var list = $('<ul></ul>');

                        var maxReached = false;
                        for (var z = 0; z <data[x].relatedObjects.length; z++) {
                            var uri = data[x].relatedObjects[z].uri;
                            var label = data[x].relatedObjects[z].label;

                            if (z == 10 & data[x].relatedObjects.length > 10) {
                                list.append("<li class='more'>more...</li>").click(function() {
                                    $('ul li.more').remove();
                                    $('ul li:gt('+z+')').show();
                                });
                                maxReached = true
                            }

                            if (uri == undefined){
                                if (maxReached) {
                                    list.append("<li style='display:none'>\""+  label +"\"</li>");
                                }
                                else {
                                    list.append("<li>\""+  label +"\"</li>");
                                }
                            }
                            else {
                                if (maxReached) {
                                    list.append("<li style='display:none'><a href='describe?uri=" + encodeURIComponent(uri) + "'>"+  label +"</a></li>");
                                }
                                else {
                                    list.append("<li><a href='describe?uri=" + encodeURIComponent(uri) + "'>"+  label +"</a></li>");
                                }
                            }
                        }
                        div.append(list);

                        var typelist = $('<span></span>');

                        for (var y = 0; y <data[x].relatedObjectTypes.length; y++) {
                            if (y == 0 ) {
                                typelist.append(" (");
                            }
                            var typeUri = data[x].relatedObjectTypes[y].uri;
                            var typeLabel = data[x].relatedObjectTypes[y].label;
                            var typeDesc = data[x].relatedObjectTypes[y].description;

                            if (typeUri == undefined){
                                typelist.append("\""+  typeLabel +"\"");
                            }
                            else {
                                typelist.append("<a href='describe?uri=" + encodeURIComponent(typeUri) + "'>"+  typeLabel +"</a>");
                            }
                            if (data[x].relatedObjectTypes.length > y+1) {
                                typelist.append(", ")
                            }
                            else {
                                typelist.append(")")
                            }
                        }
                        propertyP.after(typelist);
                    }
                    element.append(div);
                }
            },
            error: function (request, status, error) {
                loading.empty();
                hideBusyMessage();
                displayError(request.responseText);
            }
        })
    }
}

function renderRelatedFromSubjects(element) {

    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    var uri;
    if (queryString.match(/uri=/)) {
        uri = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);

        var loadingimg = $('<img />');
        loadingimg.attr('src', 'images/ajax-loader.gif');
        loadingimg.attr('alt', '.');
        var loading = $('<p id="fetchRelated">Fetching related from data...</p>').append(loadingimg);
        element.append(loading);

        $.ajax ( {
            type: 'GET',
            url: loadstarExploreService + "/relatedFromSubjects?" + queryString,
            success: function (data){

                loading.empty();

                if (data.length > 0) {

                    var about = $("<h3>" + "Related From" + "</h3>");
                    var div = $('<p></p>');

                    element.append(about);
                    element.append(div);


                    for (var x = 0; x < data.length; x ++) {

                        var propertyLabel = data[x].propertyLabel;
                        var propertyUri = data[x].propertyUri;

                        var typelist = $('<span></span>');

                        for (var y = 0; y <data[x].relatedObjectTypes.length; y++) {
                            if (y == 0) {
                                typelist.append("(")
                            }
                            var typeUri = data[x].relatedObjectTypes[y].uri;
                            var typeLabel = data[x].relatedObjectTypes[y].label;
                            var typeDesc = data[x].relatedObjectTypes[y].description;
                            typelist.append("<a title='"+ typeUri + "' href='describe?uri=" + encodeURIComponent(typeUri) + "'>"+  typeLabel +"</a>");
                            if (data[x].relatedObjectTypes.length > y+1) {
                                typelist.append(", ")
                            }
                            else {
                                typelist.append(") ")
                            }
                        }

                        div.append(typelist);
                        var propertyP = $("<a style='font-weight: bold;' href='describe?uri=" + encodeURIComponent(propertyUri) + "'>"+  propertyLabel +"</a>");
                        div.append(propertyP)

                        var list = $('<ul></ul>');

                        var maxReached = false;
                        for (var z = 0; z <data[x].relatedObjects.length; z++) {
                            var uri = data[x].relatedObjects[z].uri;
                            var label = data[x].relatedObjects[z].label;

                            if (z == 10 & data[x].relatedObjects.length > 10) {
                                list.append("<li class='more'>more...</li>").click(function() {
                                    $('ul li.more').remove();
                                    $('ul li:gt('+z+')').show();
                                });
                                maxReached = true
                            }

                            if (uri == undefined){
                                if (maxReached) {
                                    list.append("<li style='display:none'"+  label +"</a></li>");
                                }
                                else {
                                    list.append("<li>"+  label +"</a></li>");
                                }
                            }
                            else {
                                if (maxReached) {
                                    list.append("<li style='display:none'><a href='describe?uri=" + encodeURIComponent(uri) + "'>"+  label +"</a></li>");
                                }
                                else {
                                    list.append("<li><a href='describe?uri=" + encodeURIComponent(uri) + "'>"+  label +"</a></li>");
                                }
                            }
                        }
                        div.append(list);
                    }
                }

            },
            error: function (request, status, error) {
                loading.empty();
                hideBusyMessage();
                displayError(request.responseText);
            }
        })
    }
}

function renderXML(uri) {
    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    if (queryString.match(/uri=/)) {
        var param = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);
        location.href = loadestarQueryService + "?query=" + encodeURIComponent("describe<" + param + ">") + "&format=RDF/XML";
    }
    else if (uri != undefined) {
        location.href = loadestarQueryService + "?query=" + encodeURIComponent("describe<" + uri + ">") + "&format=RDF/XML";
    }

}

function renderN3(uri) {
    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    if (queryString.match(/uri=/)) {
        var param = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);
        location.href = loadestarQueryService + "?query=" + encodeURIComponent("describe<" + param + ">") + "&format=N3";
    }
    else if (uri != undefined) {
        location.href = loadestarQueryService + "?query=" + encodeURIComponent("describe<" + uri + ">") + "&format=N3";
    }
}

function renderJson(uri) {
    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    if (queryString.match(/uri=/)) {
        var param = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);
        location.href = loadestarQueryService + "?query=" + encodeURIComponent("describe<" + param + ">") + "&format=JSON-LD";
    }
    else if (uri != undefined) {
        location.href = loadestarQueryService + "?query=" + encodeURIComponent("describe<" + uri + ">") + "&format=JSON-LD";
    }
}

function _getPrefixes () {
    var prefixes = '';
    for (prefix in this.loadstarNamespaces) {
        var uri = this.loadstarNamespaces[prefix];
        prefixes = prefixes + 'PREFIX ' + prefix + ': <' + uri + '>\n';
    }
    return prefixes;
}

function setNamespaces (namespaces) {
    this.loadstarNamespaces = namespaces;
}

function _betterUnescape (s) {
    return unescape(s.replace(/\+/g, ' '));
}

function resetPage() {
    displaySparqlEndpoint();
    $('#pagination').hide();

    $('#limit').val(lodestarResultsPerPage);
    $('#offset').val(0);

    hideBusyMessage();
    clearErrors();
}

function clearErrors() {
    $("#error-text").text("");
    $("#error-div").hide();
}

function displaySparqlEndpoint() {

    $("#sparql-endpoint-url").text(loadestarQueryService);
}

function reloadPage() {
    var match = document.location.href.match(/(.*)\?.*/);
    document.location = match[1];
}


function displayError(message) {
    log(message);
    $("#error-text").text(message);
    $("#error-div").show();
}


function displayBusyMessage() {
    $("#query-executing-spinner").show();
}
function hideBusyMessage() {
    $("#query-executing-spinner").hide();
}


function log(msg) {
    $('#logmessage').append(msg);
}
